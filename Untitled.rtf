{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 STIXGeneral-Regular;
}
{\colortbl;\red255\green255\blue255;\red202\green202\blue202;\red70\green137\blue204;\red23\green23\blue23;
\red194\green126\blue101;}
{\*\expandedcolortbl;;\cssrgb\c83137\c83137\c83137;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;
\cssrgb\c80784\c56863\c47059;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0

\f1\b \cf3 \cb4 \strokec3 # #### Data we need:
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # user input:
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - investment amount, trading pair -> amt0, amt1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - start time and end time
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - time period that you assume fixed swap price, swap volumes or liquidity positions
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - upper and lower price
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - pool_fee_rate
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # data from api:
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - cprice of each time period (tick, 1.0001 ** i)
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - L_pool at each time period at specific pool_fee_rate (liquidity?, or simply total X tokens + Y tokens in USD)
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - Swap volume at each time period at specific pool_fee_rate (volumeUSD?)
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - Gas cost to mint at each time period
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # --------------------------------------------------------------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # #### Fees
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # The liquidity amount is calculated from the following numbers that describe a position: 
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - amount of token 0 (amt0), amount of token 1 (amt1), 
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - price (as x token 1's per token 0) at the upper limit of the position (upper), 
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - price at the lower limit of the position (lower) 
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - and the current swap price (cprice). 
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # Then liquidity (L_you?) for a position is calculated as follows:
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # Case 1: cprice <= lower
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - liquidity = amt0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # Case 2: lower < cprice <= upper
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - liquidity is the min of the following two calculations:
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - amt0 * (sqrt(upper) * sqrt(cprice)) / (sqrt(upper) - sqrt(cprice))
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - amt1 / (sqrt(cprice) - sqrt(lower))
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # Case 3: upper < cprice
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - liquidity = amt1 / (sqrt(upper) - sqrt(lower))
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # Resources
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - liquidity can use this code: https://github.com/JNP777/UNI_V3-Liquitidy-amounts-calcs/blob/main/UNI_v3_funcs.py
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # Fee is calculated by:
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - Fee income = (L_you/L_pool) * swap volume under fixed time period * pool_fee_rate/100
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - L_you also should be for that specific ticks only, not the whole amount you provided for. Its not linear, its calculated from the 3 cases above
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - Does Case1 and Case3's fee be 0 regardless?
\f0\b0 \cf2 \cb1 \strokec2 \
\
\

\f1\b \cf3 \cb4 \strokec3 # reference: https://uniswapv3.flipsidecrypto.com/
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - check my numbers with the reference from the website
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # ----------------------------------------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # #### Impermanent Loss (is this v2 or v3)
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - IL (in %) = (2 sqrt(p) / (p+1) ) - 1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - where p = r_t1/r_t2
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - and r_t is a price in b at time 1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # - Net $ loss = total asset value in dollars at stake time * IL (in%)
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # reference: https://chainbulletin.com/impermanent-loss-explained-with-examples-math/#:~:text=Impermanent%20loss%20is%20the%20difference,is%20equal%20to%20200%20DAI
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # --------------------------------------------------------------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # #### Other cost
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # Gas_costs_mint = 500000 gwei * gas_price at that time (??? double check actual cost)
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # ### PNL/APR
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # -PNL = Acumulated Fees_accrued (dolar value at generation) - IL - Gas_costs_mint
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # -APR = PNL/Initial_capital*(age of the position / year time)
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # --------------------------------------------------------------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \
\
\
\
\
\
\

\f1\b \cf3 \cb4 \strokec3 # https://playcode.io/780618/
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # import axios from 'axios';
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # // Constants ---------------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # const x96 = Math.pow(2, 96);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # const x128 = Math.pow(2, 128);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # const exampleNFTid = '28500';
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # const graphqlEndpoint =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   'https://api.thegraph.com/subgraphs/name/benesjan/uniswap-v3-subgraph';
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # // Constants End -----------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # // Main function -----------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # async function getPosition(id) \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   console.time('Uni Position Query');
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // The call to the subgraph
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let positionRes = await axios.post(graphqlEndpoint, \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     query: positionQuery.replace('%1', id),
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   \});
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Setting up some variables to keep things shorter & clearer
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let position = positionRes.data.data.position;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let positionLiquidity = position.liquidity;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let pool = position.pool;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let decimalDifference =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     parseInt(position.token1.decimals, 10) -
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     parseInt(position.token0.decimals, 10);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let [symbol_0, symbol_1] = [position.token0.symbol, position.token1.symbol];
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Prices (not decimal adjusted)
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceCurrent = sqrtPriceToPrice(pool.sqrtPrice);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceUpper = parseFloat(position.tickUpper.price0);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceLower = parseFloat(position.tickLower.price0);
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Square roots of the prices (not decimal adjusted)
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceCurrentSqrt = parseFloat(pool.sqrtPrice) / Math.pow(2, 96);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceUpperSqrt = Math.sqrt(parseFloat(position.tickUpper.price0));
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceLowerSqrt = Math.sqrt(parseFloat(position.tickLower.price0));
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Prices (decimal adjusted)
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceCurrentAdjusted = sqrtPriceToPriceAdjusted(
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     pool.sqrtPrice,
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     decimalDifference
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   );
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceUpperAdjusted =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     parseFloat(position.tickUpper.price0) / Math.pow(10, decimalDifference);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceLowerAdjusted =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     parseFloat(position.tickLower.price0) / Math.pow(10, decimalDifference);
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Prices (decimal adjusted and reversed)
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceCurrentAdjustedReversed = 1 / priceCurrentAdjusted;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceLowerAdjustedReversed = 1 / priceUpperAdjusted;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let priceUpperAdjustedReversed = 1 / priceLowerAdjusted;
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // The amount calculations using positionLiquidity & current, upper and lower priceSqrt
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let amount_0, amount_1;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   if (priceCurrent <= priceLower) \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     amount_0 = positionLiquidity * (1 / priceLowerSqrt - 1 / priceUpperSqrt);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     amount_1 = 0;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   \} else if (priceCurrent < priceUpper) \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     amount_0 = positionLiquidity * (1 / priceCurrentSqrt - 1 / priceUpperSqrt);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     amount_1 = positionLiquidity * (priceCurrentSqrt - priceLowerSqrt);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   \} else \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     amount_1 = positionLiquidity * (priceUpperSqrt - priceLowerSqrt);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     amount_0 = 0;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   \}
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Decimal adjustment for the amounts
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let amount_0_Adjusted = amount_0 / Math.pow(10, position.token0.decimals);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let amount_1_Adjusted = amount_1 / Math.pow(10, position.token1.decimals);
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // UNCOLLECTED FEES --------------------------------------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   // Check out the relevant formulas below which are from Uniswap Whitepaper Section 6.3 and 6.4
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   // 
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b  =
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56404 
\f1\b \uc0\u8722 
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56399 
\f1\b (
\f2\b0 \uc0\u55349 \u56406 \u55349 \u56409 
\f1\b )\uc0\u8722 
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56398 
\f1\b (
\f2\b0 \uc0\u55349 \u56406 \u55349 \u56418 
\f1\b )
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   // 
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56418 
\f1\b  =
\f2\b0 \uc0\u55349 \u56409 
\f1\b \'b7(
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b (
\f2\b0 \uc0\u55349 \u56417 
\f1\b 1)\uc0\u8722 
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b (
\f2\b0 \uc0\u55349 \u56417 
\f1\b 0))
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // These will be used for both tokens' fee amounts
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickCurrent = parseFloat(position.pool.tick);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickLower = parseFloat(position.tickLower.tickIdx);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickUpper = parseFloat(position.tickUpper.tickIdx);
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Global fee growth per liquidity '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56404 
\f1\b ' for both token 0 and token 1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let feeGrowthGlobal_0 = parseFloat(position.pool.feeGrowthGlobal0X128) / x128;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let feeGrowthGlobal_1 = parseFloat(position.pool.feeGrowthGlobal1X128) / x128;
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Fee growth outside '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56412 
\f1\b ' of our lower tick for both token 0 and token 1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickLowerFeeGrowthOutside_0 =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     parseFloat(position.tickLower.feeGrowthOutside0X128) / x128;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickLowerFeeGrowthOutside_1 =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     parseFloat(position.tickLower.feeGrowthOutside1X128) / x128;
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Fee growth outside '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56412 
\f1\b ' of our upper tick for both token 0 and token 1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickUpperFeeGrowthOutside_0 =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     parseFloat(position.tickUpper.feeGrowthOutside0X128) / x128;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickUpperFeeGrowthOutside_1 =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     parseFloat(position.tickUpper.feeGrowthOutside1X128) / x128;
\f0\b0 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4   \cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0

\f1\b \cf3 \cb4 \strokec3 #   // These are '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56399 
\f1\b (
\f2\b0 \uc0\u55349 \u56406 \u55349 \u56409 
\f1\b )' and '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56398 
\f1\b (
\f2\b0 \uc0\u55349 \u56406 \u55349 \u56418 
\f1\b )' from the formula
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   // for both token 0 and token 1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickLowerFeeGrowthBelow_0;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickLowerFeeGrowthBelow_1;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickUpperFeeGrowthAbove_0;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let tickUpperFeeGrowthAbove_1;
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // These are the calculations for '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56398 
\f1\b (
\f2\b0 \uc0\u55349 \u56406 
\f1\b )' from the formula
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   // for both token 0 and token 1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   if (tickCurrent >= tickUpper) \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     tickUpperFeeGrowthAbove_0 = feeGrowthGlobal_0 - tickUpperFeeGrowthOutside_0;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     tickUpperFeeGrowthAbove_1 = feeGrowthGlobal_1 - tickUpperFeeGrowthOutside_1;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   \} else \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     tickUpperFeeGrowthAbove_0 = tickUpperFeeGrowthOutside_0;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     tickUpperFeeGrowthAbove_1 = tickUpperFeeGrowthOutside_1;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   \}
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // These are the calculations for '
\f2\b0 \uc0\u55349 \u56403 
\f1\b b(
\f2\b0 \uc0\u55349 \u56406 
\f1\b )' from the formula
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   // for both token 0 and token 1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   if (tickCurrent >= tickLower) \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     tickLowerFeeGrowthBelow_0 = tickLowerFeeGrowthOutside_0;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     tickLowerFeeGrowthBelow_1 = tickLowerFeeGrowthOutside_1;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   \} else \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     tickLowerFeeGrowthBelow_0 = feeGrowthGlobal_0 - tickLowerFeeGrowthOutside_0;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     tickLowerFeeGrowthBelow_1 = feeGrowthGlobal_1 - tickLowerFeeGrowthOutside_1;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   \}
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Calculations for '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b (
\f2\b0 \uc0\u55349 \u56417 
\f1\b 1)' part of the '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56418 
\f1\b  =
\f2\b0 \uc0\u55349 \u56409 
\f1\b \'b7(
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b (
\f2\b0 \uc0\u55349 \u56417 
\f1\b 1)\uc0\u8722 
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b (
\f2\b0 \uc0\u55349 \u56417 
\f1\b 0))' formula
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   // for both token 0 and token 1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let fr_t1_0 =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     feeGrowthGlobal_0 - tickLowerFeeGrowthBelow_0 - tickUpperFeeGrowthAbove_0;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let fr_t1_1 =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     feeGrowthGlobal_1 - tickLowerFeeGrowthBelow_1 - tickUpperFeeGrowthAbove_1;
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b (
\f2\b0 \uc0\u55349 \u56417 
\f1\b 0)' part of the '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56418 
\f1\b  =
\f2\b0 \uc0\u55349 \u56409 
\f1\b \'b7(
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b (
\f2\b0 \uc0\u55349 \u56417 
\f1\b 1)\uc0\u8722 
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b (
\f2\b0 \uc0\u55349 \u56417 
\f1\b 0))' formula
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   // for both token 0 and token 1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let feeGrowthInsideLast_0 =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     parseFloat(position.feeGrowthInside0LastX128) / x128;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let feeGrowthInsideLast_1 =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     parseFloat(position.feeGrowthInside1LastX128) / x128;
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // The final calculations for the '
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56418 
\f1\b  =
\f2\b0 \uc0\u55349 \u56409 
\f1\b \'b7(
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b (
\f2\b0 \uc0\u55349 \u56417 
\f1\b 1)\uc0\u8722 
\f2\b0 \uc0\u55349 \u56403 \u55349 \u56415 
\f1\b (
\f2\b0 \uc0\u55349 \u56417 
\f1\b 0))' uncollected fees formula
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   // for both token 0 and token 1 since we now know everything that is needed to compute it
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let uncollectedFees_0 = positionLiquidity * (fr_t1_0 - feeGrowthInsideLast_0);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let uncollectedFees_1 = positionLiquidity * (fr_t1_1 - feeGrowthInsideLast_1);
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Decimal adjustment to get final results
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let uncollectedFeesAdjusted_0 =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     uncollectedFees_0 / Math.pow(10, position.token0.decimals);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let uncollectedFeesAdjusted_1 =
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     uncollectedFees_1 / Math.pow(10, position.token1.decimals);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   // UNCOLLECTED FEES END ----------------------------------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   // Logs of the the results
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   console.table([
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     ['Pair', \cf5 \strokec5 `$\{symbol_0\}/$\{symbol_1\}`\cf3 \strokec3 ],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     ['Upper Price', priceUpperAdjusted.toPrecision(5)],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     ['Current Price', priceCurrentAdjusted.toPrecision(5)],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     ['Lower Price', priceLowerAdjusted.toPrecision(5)],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     [\cf5 \strokec5 `Current Amount $\{symbol_0\}`\cf3 \strokec3 , amount_0_Adjusted.toPrecision(5)],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     [\cf5 \strokec5 `Current Amount $\{symbol_1\}`\cf3 \strokec3 , amount_1_Adjusted.toPrecision(5)],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     [\cf5 \strokec5 `Uncollected Fee Amount $\{symbol_0\}`\cf3 \strokec3 , uncollectedFeesAdjusted_0.toPrecision(5)],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     [\cf5 \strokec5 `Uncollected Fee Amount $\{symbol_1\}`\cf3 \strokec3 , uncollectedFeesAdjusted_1.toPrecision(5)],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     [\cf5 \strokec5 `Decimals $\{symbol_0\}`\cf3 \strokec3 , position.token0.decimals],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     [\cf5 \strokec5 `Decimals $\{symbol_1\}`\cf3 \strokec3 , position.token1.decimals],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     ['------------------', '------------------'],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     ['Upper Price Reversed', priceUpperAdjustedReversed.toPrecision(5)],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     ['Current Price Reversed', priceCurrentAdjustedReversed.toPrecision(5)],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     ['Lower Price Reversed', priceLowerAdjustedReversed.toPrecision(5)],
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   ]);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   console.timeEnd('Uni Position Query');
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # \}
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # // Main Function End --------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # // Helper Functions ---------------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # function sqrtPriceToPriceAdjusted(sqrtPriceX96Prop, decimalDifference) \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let sqrtPrice = parseFloat(sqrtPriceX96Prop) / x96;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let divideBy = Math.pow(10, decimalDifference);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let price = Math.pow(sqrtPrice, 2) / divideBy;
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 #   return price;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # \}
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # function sqrtPriceToPrice(sqrtPriceX96Prop) \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let sqrtPrice = parseFloat(sqrtPriceX96Prop) / x96;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   let price = Math.pow(sqrtPrice, 2);
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #   return price;
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # \}
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # // Helper Functions End ----------------------------------------------------
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # // Subgraph query for the position
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # const positionQuery = `
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     query tokenPosition \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #         position(id: "%1")\{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             id
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             token0\{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 symbol
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 derivedETH
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 id
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 decimals
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             \}
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             token1\{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 symbol
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 derivedETH
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 id
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 decimals
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             \}
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             pool\{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 id
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 liquidity
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 sqrtPrice
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 tick
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 feeGrowthGlobal0X128
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 feeGrowthGlobal1X128
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             \}
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             liquidity
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             depositedToken0
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             depositedToken1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             feeGrowthInside0LastX128
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             feeGrowthInside1LastX128
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             tickLower \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 tickIdx
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 price0
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 price1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 feeGrowthOutside0X128
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 feeGrowthOutside1X128
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             \}
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             tickUpper \{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 tickIdx
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 price0
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 price1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 feeGrowthOutside0X128
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 feeGrowthOutside1X128
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             \}
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             withdrawnToken0
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             withdrawnToken1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             collectedFeesToken0
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             collectedFeesToken1
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             transaction\{
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 timestamp
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #                 blockNumber
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #             \}
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #         \}
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 #     \}
\f0\b0 \cf2 \cb1 \strokec2 \

\f1\b \cf3 \cb4 \strokec3 # `;
\f0\b0 \cf2 \cb1 \strokec2 \
\

\f1\b \cf3 \cb4 \strokec3 # getPosition(exampleNFTid);
\f0\b0 \cf2 \cb1 \strokec2 \
\
}